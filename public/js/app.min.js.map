{"version":3,"sources":["app.coffee","app.js","routes.coffee","client.coffee","loading.coffee","logger.coffee","session.coffee","storage.coffee","user-group.coffee","user.coffee","date-br.coffee","date-time-br.coffee","first-name.coffee","phone-br.coffee","file.coffee","clients.coffee","login.coffee","users.coffee"],"names":["angular","module","run","$rootScope","$state","RESOURCES","UserService","error","success","loading","fileUrl","API_URL","page","name","showMenu","showSubmenu","appTitle","forms","doLogout","toggleMenu","toggleSubmenu","$on","current","split","localStorage","getItem","requiredLogin","isLogged","go","constant","config","$stateProvider","$httpProvider","$urlRouterProvider","state","url","views","main","templateUrl","controller","error@login","abstract","header","footer","main@","submenu@dashboard.users","error@dashboard.users","success@dashboard.users","loading@dashboard.users","error@dashboard.users.new","loading@dashboard.users.new","error@dashboard.users.edit","loading@dashboard.users.edit","submenu@dashboard.clients","error@dashboard.clients","success@dashboard.clients","loading@dashboard.clients","error@dashboard.clients.new","loading@dashboard.clients.new","error@dashboard.clients.edit","submenu@dashboard.properties","otherwise","interceptors","push","defaults","useXDomain","headers","common","service","$http","apiUrl","create","user","post","update","put","_id","saveOrUpdate","this","getAll","get","id","delete","show","hide","clean","modalError","errorString","successString","storage","isUnloggedPage","indexOf","request","getSessionToken","setCodes","codes","setItem","token","code","type","getCode","removeItem","items","title","doLogin","filter","input","date","moment","format","locale","calendar","sameElse","names","length","replace","group","map","item","directive","require","restrict","link","$scope","elem","attrs","ngModel","changeHandler","event","file","files","target","$setViewValue","$apply","bind","$stateParams","$filter","$loading","$logger","ClientService","client","clients","edit","then","response","data","canEdit","$valid","doDelete","index","splice","login","origin","UserGroupService","users","groups"],"mappings":"AAAA,YAEAA,SAAQC,OAAO,kBACb,YACA,mBAEDC,KAAK,aAAc,SAAU,YAAa,cAAe,SAACC,EAAYC,EAAQC,EAAWC,GCgBtF,MDdFH,GAAWI,OAAQ,EACnBJ,EAAWK,SAAU,EACrBL,EAAWM,SAAU,EAErBN,EAAWO,QAAUL,EAAUM,QAAU,IAEzCR,EAAWS,KAAO,GAClBT,EAAWU,KAAO,GAElBV,EAAWW,UAAW,EACtBX,EAAWY,aAAc,EAEzBZ,EAAWa,SAAW,8BAEtBb,EAAWc,SAEXd,EAAWe,SAAW,WCVlB,MDWFZ,GAAYY,YAEdf,EAAWgB,WAAa,WCVpB,MDWFhB,GAAWW,UAAYX,EAAWW,UAEpCX,EAAWiB,cAAgB,WCVvB,MDWFjB,GAAWY,aAAeZ,EAAWY,aAEvCZ,EAAWkB,IAAI,sBAAuB,WAEpC,GAAAT,EAYA,IAZAA,EAAOR,EAAOkB,QAAQT,KAAKU,MAAM,KACjCpB,EAAWS,KAAOA,EAAK,IAAM,GAE7BT,EAAWU,KAAOW,aAAaC,QAAQ,aAAe,GAEtDtB,EAAWI,OAAQ,EACnBJ,EAAWK,SAAU,EACrBL,EAAWM,SAAU,EACrBN,EAAWW,UAAW,EACtBX,EAAWY,aAAc,EAECX,EAAOkB,QAAQI,gBAAkBpB,EAAYqB,YAAvErB,EAAYY,YACoBd,EAAOkB,QAAQI,eAAiBpB,EAAYqB,WCXxE,MDWJvB,GAAOwB,GAAG,uBAEbC,SAAS,aAERlB,QAAW,8BEjDbX,QAAQC,OAAO,kBACd6B,QAAQ,iBAAkB,gBAAiB,qBAAsB,SAACC,EAAgBC,EAAeC,GDmM9F,MCjMFF,GAECG,MAAM,SACLC,IAAK,SACLC,OACEC,MACEC,YAAa,6BACbC,WAAY,aACdC,eACEF,YAAa,yBACjBZ,eAAe,IAEhBQ,MAAM,aACLC,IAAK,aACLM,YAAU,EACVL,OACEC,QACAK,QACEJ,YAAa,yBACfK,QACEL,YAAa,0BACjBZ,eAAe,IAEhBQ,MAAM,kBACLC,IAAK,QACLC,OACEQ,SACEN,YAAa,8BACjBZ,eAAe,IAEhBQ,MAAM,mBACLC,IAAK,SACLC,OACEQ,SACEN,YAAa,6BACbC,WAAY,aACdM,2BACEP,YAAa,gCACfQ,yBACER,YAAa,wBACfS,2BACET,YAAa,0BACfU,2BACEV,YAAa,2BACjBZ,eAAe,IAEhBQ,MAAM,uBACLC,IAAK,OACLC,OACEQ,SACEN,YAAa,4BACbC,WAAY,aACdU,6BACEX,YAAa,wBACfY,+BACEZ,YAAa,2BACjBZ,eAAe,IAEhBQ,MAAM,wBACLC,IAAK,YACLC,OACEQ,SACEN,YAAa,4BACbC,WAAY,aACdY,8BACEb,YAAa,wBACfc,gCACEd,YAAa,2BACjBZ,eAAe,IAEhBQ,MAAM,qBACLC,IAAK,WACLC,OACEQ,SACEN,YAAa,+BACbC,WAAY,eACdc,6BACEf,YAAa,kCACfgB,2BACEhB,YAAa,wBACfiB,6BACEjB,YAAa,0BACfkB,6BACElB,YAAa,2BACjBZ,eAAe,IAEhBQ,MAAM,yBACLC,IAAK,OACLC,OACEQ,SACEN,YAAa,8BACbC,WAAY,eACdkB,+BACEnB,YAAa,wBACfoB,iCACEpB,YAAa,2BACjBZ,eAAe,IAEhBQ,MAAM,0BACLC,IAAK,YACLC,OACEQ,SACEN,YAAa,8BACbC,WAAY,eACdoB,gCACErB,YAAa,wBACfc,gCACEd,YAAa,2BACjBZ,eAAe,IAEhBQ,MAAM,wBACLC,IAAK,cACLC,OACEQ,SACEN,YAAa,mCACfsB,gCACEtB,YAAa,sCACjBZ,eAAe,IAEjBO,EAAmB4B,UAAU,UAG7B7B,EAAc8B,aAAaC,KAAK,mBAEhC/B,EAAcgC,SAASC,YAAa,EACpCjC,EAAcgC,SAASE,QAAQC,OAAO,gBAAkB,yBACjDnC,GAAcgC,SAASE,QAAQC,OAAO,uBCjI/CnE,QAAQC,OAAO,kBACdmE,QAAQ,iBAAkB,QAAS,SAAU,YAAa,SAACC,EAAOjE,EAAQC,GAEzE,GAAAiE,EF0ME,OE1MFA,GAASjE,EAAUM,QAAU,YAE7B4D,OAAQ,SAACC,GACP,MAAOH,GAAMI,KAAKH,EAAQE,IAC5BE,OAAQ,SAACF,GACP,MAAOH,GAAMM,IAAIL,EAAS,IAAME,EAAKI,IAAKJ,IAC5CK,aAAc,SAACL,GACb,MAAGA,GAAKI,IAASE,KAAKJ,OAAOF,GACxBM,KAAKP,OAAOC,IACnBO,OAAQ,WACN,MAAOV,GAAMW,IAAIV,IACnBU,IAAK,SAACC,GACJ,MAAOZ,GAAMW,IAAIV,EAAS,IAAMW,IAClCC,SAAQ,SAACD,GACP,MAAOZ,GAAM,UAAOC,EAAQ,IAAMW,QCjBtCjF,QAAQC,OAAO,kBACdmE,QAAQ,YAAa,aAAc,SAACjE,GH0OjC,OGxOFgF,KAAM,WH0OA,MGzOJhF,GAAWM,SAAU,GACvB2E,KAAM,WH2OA,MG1OJjF,GAAWM,SAAU,OCNzBT,QAAQC,OAAO,kBACdmE,QAAQ,WAAY,aAAc,SAACjE,GJwPhC,OItPFkF,MAAO,WJ0PD,MIzPJlF,GAAWK,SAAU,EACrBL,EAAWI,OAAQ,EACnBJ,EAAWmF,YAAa,GAC1B/E,MAAO,SAACgF,GJ0PF,MIzPJT,MAAKO,QACLlF,EAAWI,MAAQgF,GACrBD,WAAY,SAACC,GJ2PP,MI1PJT,MAAKO,QACLlF,EAAWmF,WAAaC,GAC1B/E,QAAS,SAACgF,GJ4PJ,MI3PJV,MAAKO,QACLlF,EAAWK,QAAUgF,OCfzBxF,QAAQC,OAAO,kBACdmE,QAAQ,mBAAoB,UAAW,SAACqB,GAEvC,GAAAC,ELmRE,OKnRFA,GAAiB,SAAC5D,GAChB,MAAQA,GAAOK,IAAIwD,QAAQ,YAAgB7D,EAAOK,IAAIwD,QAAQ,iBAEhEC,QAAS,SAAC9D,GAGR,MAFI4D,GAAe5D,KACjBA,EAAOoC,QAAQ,kBAAoBuB,EAAQI,mBACtC/D,OCTX9B,QAAQC,OAAO,kBACdmE,QAAQ,UAAW,WNkSlB,OMjSAzC,SAAU,WACR,MAA8C,QAAtCH,aAAaC,QAAQ,eAA+D,OAApCD,aAAaC,QAAQ,aAC/EqE,SAAU,SAACC,GNuSP,MMtSFvE,cAAawE,QAAQ,aAAcD,EAAME,OACzCzE,aAAawE,QAAQ,WAAYD,EAAMG,MACvC1E,aAAawE,QAAQ,YAAaD,EAAMI,MACxC3E,aAAawE,QAAQ,WAAYD,EAAMlF,OACzCgF,gBAAiB,WNqSb,MMpSFrE,cAAaC,QAAQ,eACvB2E,QAAS,WNsSL,MMrSF5E,cAAaC,QAAQ,aACvB4D,MAAO,WN0SH,MMzSF7D,cAAa6E,WAAW,cACxB7E,aAAa6E,WAAW,YACxB7E,aAAa6E,WAAW,aACxB7E,aAAa6E,WAAW,gBCjB5BrG,QAAQC,OAAO,kBACdmE,QAAQ,mBAAoB,WAE3B,GAAAkC,EPqUA,OOrUAA,KACGC,MAAO,mBAAoBL,KAAM,UACjCK,MAAO,cAAeL,KAAM,YAG/BnB,OAAQ,WACN,MAAOuB,OCTXtG,QAAQC,OAAO,kBACdmE,QAAQ,eAAgB,QAAS,SAAU,UAAW,YAAa,SAACC,EAAOjE,EAAQqF,EAASpF,GAE3F,GAAAiE,ERiVE,OQjVFA,GAASjE,EAAUM,QAAU,aAE7BgB,SAAU,WACR,MAAO8D,GAAQ9D,YACjB6E,QAAS,SAAChC,GACR,MAAOH,GAAMI,KAAKH,EAAS,QAASE,IACtCtD,SAAU,WACNuE,EAAQJ,QACRjF,EAAOwB,GAAG,UAEd2C,OAAQ,SAACC,GACP,MAAOH,GAAMI,KAAKH,EAAQE,IAC5BE,OAAQ,SAACF,GACP,MAAOH,GAAMM,IAAIL,EAAS,IAAME,EAAKI,IAAKJ,IAC5CK,aAAc,SAACL,GACb,MAAGA,GAAKI,IAASE,KAAKJ,OAAOF,GACxBM,KAAKP,OAAOC,IACnBO,OAAQ,WACN,MAAOV,GAAMW,IAAIV,IACnBU,IAAK,SAACC,GACJ,MAAOZ,GAAMW,IAAIV,EAAS,IAAMW,IAClCC,SAAQ,SAACD,GACP,MAAOZ,GAAM,UAAOC,EAAQ,IAAMW,QCzBtCjF,QAAQC,OAAO,kBACdwG,OAAO,SAAU,WT0XhB,MSzXA,UAACC,GAEC,GAAAC,EAAA,OAAiB,OAAAD,EAAV,IACPC,EAAOD,EAAMnF,MAAM,KAEnBqF,OAAOD,EAAK,IAAIE,OAAO,kBCP3B7G,QAAQC,OAAO,kBACdwG,OAAO,aAAc,WVsYpB,MUrYA,UAACC,GACC,MAAiB,OAAAA,EAAV,IACPE,OAAOE,OAAO,SACdF,OAAOF,GAAOK,SAAS,MAAOC,SAAU,0BCL5ChH,QAAQC,OAAO,kBACdwG,OAAO,YAAa,WXmZnB,MWlZA,UAAC5F,GAEC,GAAAoG,EAAA,OAAiB,OAAApG,GAAiB,KAARA,EAAnB,IACPoG,EAAQpG,EAAKU,MAAM,KACZ0F,EAAM,OCNjBjH,QAAQC,OAAO,kBACdwG,OAAO,UAAW,WZ+ZjB,MY9ZA,UAACC,GACC,MAAiB,OAAAA,EAAV,GAEY,KAAhBA,EAAMQ,OACER,EAAMS,QAAQ,yBAAyB,cAEvCT,EAAMS,QAAQ,yBAAyB,iBLRtDnH,QAAQC,OAAO,kBACdwG,OAAO,YAAa,WP6anB,MO5aA,UAACW,GAEC,GAAAd,GAAAC,CAAA,OAAiB,OAAAa,GAAmB,KAATA,EAApB,IACPd,IACGC,MAAO,mBAAoBL,KAAM,UACjCK,MAAO,cAAeL,KAAM,WAG/BK,EAAQ,GACRD,EAAMe,IAAI,SAACC,GACT,GAAsBA,EAAKpB,OAAQkB,EPmbjC,MOnbFb,GAAQe,EAAKf,QAERA,MMdXvG,QAAQC,OAAO,kBACdsH,UAAU,OAAQ,WbucjB,OatcAC,QAAS,UACTC,SAAU,IACVC,KAAM,SAACC,EAAQC,EAAMC,EAAOC,GAE1B,GAAAC,Eb8cE,Oa9cFA,GAAgB,SAACC,GACf,GAAAC,GAAAC,Cb2cE,Oa3cFA,GAAQF,EAAMG,OAAOD,MACrBD,EAAOC,EAAM,GAEbJ,EAAQM,cAAcH,GACtBN,EAAOU,UAETT,EAAKU,KAAK,SAAUP,OCbxB/H,QAAQC,OAAO,kBACdsC,WAAW,eAAgB,SAAU,aAAc,SAAU,eAAgB,UAAW,WAAY,UAAW,UAAW,gBAAiB,SAACoF,EAAQxH,EAAYC,EAAQmI,EAAcC,EAASC,EAAUC,EAASjD,EAASkD,GdkgBxN,MchgBFhB,GAAOiB,UACPjB,EAAOkB,WAEPlB,EAAOmB,MAAO,EAEdL,EAAStD,OACNoD,EAAatD,GACd0D,EAAc3D,IAAIuD,EAAatD,IAC9B8D,KAAK,SAACC,GdydH,McxdFrB,GAAOiB,OAASI,EAASC,KACzBtB,EAAOmB,MAAO,EACdL,EAASrD,SACV,SAAM,SAAC4D,GdwdJ,McvdFN,GAAQnI,MAAM,0DACdkI,EAASrD,SAEXuD,EAAc5D,SACbgE,KAAK,SAACC,GdwdH,McvdFrB,GAAOkB,QAAUL,EAAQ,WAAWQ,EAASC,KAAM,YACnDR,EAASrD,SACV,SAAM,SAAC4D,GdwdJ,McvdFN,GAAQnI,MAAM,0DACdkI,EAASrD,SAEbuC,EAAOuB,QAAU,Wdwdb,McvdFvB,GAAOmB,MAAO,GAEhBnB,EAAO9C,aAAe,WACpB,MAAI1E,GAAWc,MAAM2H,OAAOO,QAI5BV,EAAStD,OACTwD,EAAc9D,aAAa8C,EAAOiB,QACjCG,KAAK,SAACC,GdwdH,McvdFP,GAASrD,OACThF,EAAOwB,GAAG,uBACX,SAAM,SAACoH,GdwdJ,McvdFN,GAAQnI,MAAM,6DACdkI,EAASrD,cAVTsD,GAAQnI,MAAM,0CAYlBoH,EAAOyB,SAAW,SAACC,GAEjB,GAAAT,EACA,OADAA,GAASjB,EAAOkB,QAAQQ,GACRT,EAAOhE,MAAOa,EAAQW,YAEtCqC,EAAStD,OACTwD,EAAc,UAAOC,EAAOhE,KAC3BmE,KAAK,SAACC,Gd0dH,MczdFN,GAAQlI,QAAQ,iCAChBmH,EAAOkB,QAAQS,OAAOD,EAAO,GAC7BZ,EAASrD,SACV,SAAM,SAAC4D,GdydJ,McxdFN,GAAQnI,MAAM,wDACdkI,EAASrD,cCzDfpF,QAAQC,OAAO,kBACdsC,WAAW,aAAc,SAAU,aAAc,SAAU,UAAW,UAAW,cAAe,SAACoF,EAAQxH,EAAYC,EAAQsI,EAASjD,EAASnF,GfyhB5I,MevhBFqH,GAAOnD,QAEPmD,EAAOnB,QAAU,WACf,MAAIrG,GAAWc,MAAMsI,MAAMJ,QAI3BxB,EAAOnD,KAAKgF,OAAS,QACrBlJ,EAAYkG,QAAQmB,EAAOnD,MAC1BuE,KAAK,SAACC,GfshBH,MerhBFvD,GAAQK,SAASkD,EAASC,MAC1B7I,EAAOwB,GAAG,oBACX,SAAM,SAACoH,GfqhBJ,MephBFN,GAAQnI,MAAM,0CATdmI,GAAQnI,MAAM,6CCPpBP,QAAQC,OAAO,kBACdsC,WAAW,aAAc,SAAU,aAAc,SAAU,eAAgB,UAAW,WAAY,UAAW,UAAU,mBAAoB,cAAe,SAACoF,EAAQxH,EAAYC,EAAQmI,EAAcC,EAASC,EAAUC,EAASjD,EAASgE,EAAkBnJ,GhBolBzP,MgBllBFqH,GAAOnD,QACPmD,EAAO+B,SAEP/B,EAAOgC,OAASF,EAAiB1E,SACjC4C,EAAOmB,MAAO,EAEdL,EAAStD,OACNoD,EAAatD,GACd3E,EAAY0E,IAAIuD,EAAatD,IAC5B8D,KAAK,SAACC,GhB0iBH,MgBziBFrB,GAAOnD,KAAOwE,EAASC,KACvBtB,EAAOmB,MAAO,EACdL,EAASrD,SACV,SAAM,SAAC4D,GhByiBJ,MgBxiBFN,GAAQnI,MAAM,0DACdkI,EAASrD,SAEX9E,EAAYyE,SACXgE,KAAK,SAACC,GhByiBH,MgBxiBFrB,GAAO+B,MAAQlB,EAAQ,WAAWQ,EAASC,KAAM,YACjDR,EAASrD,SACV,SAAM,SAAC4D,GhByiBJ,MgBxiBFN,GAAQnI,MAAM,0DACdkI,EAASrD,SAEbuC,EAAOuB,QAAU,WhByiBb,MgBxiBFvB,GAAOmB,MAAO,GAEhBnB,EAAO9C,aAAe,WACpB,MAAI1E,GAAWc,MAAMuD,KAAK2E,QAI1BV,EAAStD,OACT7E,EAAYuE,aAAa8C,EAAOnD,MAC/BuE,KAAK,SAACC,GhByiBH,MgBxiBFP,GAASrD,OACThF,EAAOwB,GAAG,qBACX,SAAM,SAACoH,GhByiBJ,MgBxiBFN,GAAQnI,MAAM,6DACdkI,EAASrD,cAVTsD,GAAQnI,MAAM,0CAYlBoH,EAAOyB,SAAW,SAACC,GAEjB,GAAA7E,EACA,OADAA,GAAOmD,EAAO+B,MAAML,GACJ7E,EAAKI,MAAOa,EAAQW,YAEpCqC,EAAStD,OACT7E,EAAY,UAAOkE,EAAKI,KACvBmE,KAAK,SAACC,GhB2iBH,MgB1iBFN,GAAQlI,QAAQ,iCAChBmH,EAAO+B,MAAMJ,OAAOD,EAAO,GAC3BZ,EAASrD,SACV,SAAM,SAAC4D,GhB0iBJ,MgBziBFN,GAAQnI,MAAM,wDACdkI,EAASrD","file":"app.min.js","sourcesContent":["'use strict'\n\nangular.module 'oneImobiliaria', [\n  'ui.router',\n  'ui.utils.masks'\n]\n.run ['$rootScope', '$state', 'RESOURCES', 'UserService', ($rootScope, $state, RESOURCES, UserService) ->\n\n  $rootScope.error = false\n  $rootScope.success = false\n  $rootScope.loading = false\n\n  $rootScope.fileUrl = RESOURCES.API_URL + '/'\n\n  $rootScope.page = ''\n  $rootScope.name = ''\n\n  $rootScope.showMenu = false\n  $rootScope.showSubmenu = false\n\n  $rootScope.appTitle = 'One Consultoria Imobiliária'\n\n  $rootScope.forms = {}\n\n  $rootScope.doLogout = () ->\n    UserService.doLogout()\n\n  $rootScope.toggleMenu = () ->\n    $rootScope.showMenu = !$rootScope.showMenu\n\n  $rootScope.toggleSubmenu = () ->\n    $rootScope.showSubmenu = !$rootScope.showSubmenu\n\n  $rootScope.$on '$stateChangeSuccess', () ->\n\n    page = $state.current.name.split('.')\n    $rootScope.page = page[1] || ''\n\n    $rootScope.name = localStorage.getItem('name-one') || ''\n\n    $rootScope.error = false\n    $rootScope.success = false\n    $rootScope.loading = false\n    $rootScope.showMenu = false\n    $rootScope.showSubmenu = false\n\n    UserService.doLogout() if $state.current.requiredLogin && !UserService.isLogged()\n    $state.go('dashboard.home') if !$state.current.requiredLogin && UserService.isLogged()\n]\n.constant 'RESOURCES',\n#  'API_URL': 'http://desenv.doisoitosete.com:3000/api'\n  'API_URL': 'http://localhost:3000/api'\n","'use strict';\nangular.module('oneImobiliaria', ['ui.router', 'ui.utils.masks']).run([\n  '$rootScope', '$state', 'RESOURCES', 'UserService', function($rootScope, $state, RESOURCES, UserService) {\n    $rootScope.error = false;\n    $rootScope.success = false;\n    $rootScope.loading = false;\n    $rootScope.fileUrl = RESOURCES.API_URL + '/';\n    $rootScope.page = '';\n    $rootScope.name = '';\n    $rootScope.showMenu = false;\n    $rootScope.showSubmenu = false;\n    $rootScope.appTitle = 'One Consultoria Imobiliária';\n    $rootScope.forms = {};\n    $rootScope.doLogout = function() {\n      return UserService.doLogout();\n    };\n    $rootScope.toggleMenu = function() {\n      return $rootScope.showMenu = !$rootScope.showMenu;\n    };\n    $rootScope.toggleSubmenu = function() {\n      return $rootScope.showSubmenu = !$rootScope.showSubmenu;\n    };\n    return $rootScope.$on('$stateChangeSuccess', function() {\n      var page;\n      page = $state.current.name.split('.');\n      $rootScope.page = page[1] || '';\n      $rootScope.name = localStorage.getItem('name-one') || '';\n      $rootScope.error = false;\n      $rootScope.success = false;\n      $rootScope.loading = false;\n      $rootScope.showMenu = false;\n      $rootScope.showSubmenu = false;\n      if ($state.current.requiredLogin && !UserService.isLogged()) {\n        UserService.doLogout();\n      }\n      if (!$state.current.requiredLogin && UserService.isLogged()) {\n        return $state.go('dashboard.home');\n      }\n    });\n  }\n]).constant('RESOURCES', {\n  'API_URL': 'http://localhost:3000/api'\n});\n\n'use strict';\nangular.module('oneImobiliaria').config([\n  '$stateProvider', '$httpProvider', '$urlRouterProvider', function($stateProvider, $httpProvider, $urlRouterProvider) {\n    $stateProvider.state('login', {\n      url: '/login',\n      views: {\n        main: {\n          templateUrl: 'app/views/login/index.html',\n          controller: 'LoginCtrl'\n        },\n        'error@login': {\n          templateUrl: 'app/views/error.html'\n        }\n      },\n      requiredLogin: false\n    }).state('dashboard', {\n      url: '/dashboard',\n      abstract: true,\n      views: {\n        main: {},\n        header: {\n          templateUrl: 'app/views/header.html'\n        },\n        footer: {\n          templateUrl: 'app/views/footer.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.home', {\n      url: '/home',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/home/index.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.users', {\n      url: '/users',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/users/index.html',\n          controller: 'UsersCtrl'\n        },\n        'submenu@dashboard.users': {\n          templateUrl: 'app/views/users/submenu.html'\n        },\n        'error@dashboard.users': {\n          templateUrl: 'app/views/error.html'\n        },\n        'success@dashboard.users': {\n          templateUrl: 'app/views/success.html'\n        },\n        'loading@dashboard.users': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.users.new', {\n      url: '/new',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/users/form.html',\n          controller: 'UsersCtrl'\n        },\n        'error@dashboard.users.new': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.users.new': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.users.edit', {\n      url: '/edit/:id',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/users/form.html',\n          controller: 'UsersCtrl'\n        },\n        'error@dashboard.users.edit': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.users.edit': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.clients', {\n      url: '/clients',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/clients/index.html',\n          controller: 'ClientsCtrl'\n        },\n        'submenu@dashboard.clients': {\n          templateUrl: 'app/views/clients/submenu.html'\n        },\n        'error@dashboard.clients': {\n          templateUrl: 'app/views/error.html'\n        },\n        'success@dashboard.clients': {\n          templateUrl: 'app/views/success.html'\n        },\n        'loading@dashboard.clients': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.clients.new', {\n      url: '/new',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/clients/form.html',\n          controller: 'ClientsCtrl'\n        },\n        'error@dashboard.clients.new': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.clients.new': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.clients.edit', {\n      url: '/edit/:id',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/clients/form.html',\n          controller: 'ClientsCtrl'\n        },\n        'error@dashboard.clients.edit': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.users.edit': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.properties', {\n      url: '/properties',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/properties/index.html'\n        },\n        'submenu@dashboard.properties': {\n          templateUrl: 'app/views/properties/submenu.html'\n        }\n      },\n      requiredLogin: true\n    });\n    $urlRouterProvider.otherwise('/login');\n    $httpProvider.interceptors.push('sessionInjector');\n    $httpProvider.defaults.useXDomain = true;\n    $httpProvider.defaults.headers.common[\"Content-Type\"] = 'application/json';\n    return delete $httpProvider.defaults.headers.common['X-Requested-With'];\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('ClientService', [\n  '$http', '$state', 'RESOURCES', function($http, $state, RESOURCES) {\n    var apiUrl;\n    apiUrl = RESOURCES.API_URL + '/clients';\n    return {\n      create: function(user) {\n        return $http.post(apiUrl, user);\n      },\n      update: function(user) {\n        return $http.put(apiUrl + '/' + user._id, user);\n      },\n      saveOrUpdate: function(user) {\n        if (user._id) {\n          return this.update(user);\n        } else {\n          return this.create(user);\n        }\n      },\n      getAll: function() {\n        return $http.get(apiUrl);\n      },\n      get: function(id) {\n        return $http.get(apiUrl + '/' + id);\n      },\n      \"delete\": function(id) {\n        return $http[\"delete\"](apiUrl + '/' + id);\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('$loading', [\n  '$rootScope', function($rootScope) {\n    return {\n      show: function() {\n        return $rootScope.loading = true;\n      },\n      hide: function() {\n        return $rootScope.loading = false;\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('$logger', [\n  '$rootScope', function($rootScope) {\n    return {\n      clean: function() {\n        $rootScope.success = false;\n        $rootScope.error = false;\n        return $rootScope.modalError = false;\n      },\n      error: function(errorString) {\n        this.clean();\n        return $rootScope.error = errorString;\n      },\n      modalError: function(errorString) {\n        this.clean();\n        return $rootScope.modalError = errorString;\n      },\n      success: function(successString) {\n        this.clean();\n        return $rootScope.success = successString;\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('sessionInjector', [\n  'storage', function(storage) {\n    var isUnloggedPage;\n    isUnloggedPage = function(config) {\n      return config.url.indexOf('auth') > -1 || config.url.indexOf('remember') > -1;\n    };\n    return {\n      request: function(config) {\n        if (!isUnloggedPage(config)) {\n          config.headers['x-access-token'] = storage.getSessionToken();\n        }\n        return config;\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('storage', function() {\n  return {\n    isLogged: function() {\n      return (localStorage.getItem('x-code-one') !== null) && (localStorage.getItem('code-one') !== null);\n    },\n    setCodes: function(codes) {\n      localStorage.setItem('x-code-one', codes.token);\n      localStorage.setItem('code-one', codes.code);\n      localStorage.setItem('group-one', codes.type);\n      return localStorage.setItem('name-one', codes.name);\n    },\n    getSessionToken: function() {\n      return localStorage.getItem('x-code-one');\n    },\n    getCode: function() {\n      return localStorage.getItem('code-one');\n    },\n    clean: function() {\n      localStorage.removeItem('x-code-one');\n      localStorage.removeItem('code-one');\n      localStorage.removeItem('group-one');\n      return localStorage.removeItem('name-one');\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').service('UserGroupService', function() {\n  var items;\n  items = [\n    {\n      title: 'Administrador(a)',\n      code: 'admin'\n    }, {\n      title: 'Corretor(a)',\n      code: 'broker'\n    }\n  ];\n  return {\n    getAll: function() {\n      return items;\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').service('UserService', [\n  '$http', '$state', 'storage', 'RESOURCES', function($http, $state, storage, RESOURCES) {\n    var apiUrl;\n    apiUrl = RESOURCES.API_URL + '/accounts';\n    return {\n      isLogged: function() {\n        return storage.isLogged();\n      },\n      doLogin: function(user) {\n        return $http.post(apiUrl + '/auth', user);\n      },\n      doLogout: function() {\n        storage.clean();\n        $state.go('login');\n      },\n      create: function(user) {\n        return $http.post(apiUrl, user);\n      },\n      update: function(user) {\n        return $http.put(apiUrl + '/' + user._id, user);\n      },\n      saveOrUpdate: function(user) {\n        if (user._id) {\n          return this.update(user);\n        } else {\n          return this.create(user);\n        }\n      },\n      getAll: function() {\n        return $http.get(apiUrl);\n      },\n      get: function(id) {\n        return $http.get(apiUrl + '/' + id);\n      },\n      \"delete\": function(id) {\n        return $http[\"delete\"](apiUrl + '/' + id);\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').filter('dateBr', function() {\n  return function(input) {\n    var date;\n    if (input == null) {\n      return '';\n    }\n    date = input.split('T');\n    return moment(date[0]).format('DD/MM/YYYY');\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('dateTimeBr', function() {\n  return function(input) {\n    if (input == null) {\n      return '';\n    }\n    moment.locale('pt-br');\n    return moment(input).calendar(null, {\n      sameElse: 'DD/MM/YYYY - H:mm'\n    });\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('firstName', function() {\n  return function(name) {\n    var names;\n    if ((name == null) || name === '') {\n      return '';\n    }\n    names = name.split(' ');\n    return names[0];\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('phoneBr', function() {\n  return function(input) {\n    if (input == null) {\n      return '';\n    }\n    if (input.length === 10) {\n      return input.replace(/(\\d{2})(\\d{4})(\\d{4})/g, \"(\\$1) \\$2-\\$3\");\n    } else {\n      return input.replace(/(\\d{2})(\\d{5})(\\d{4})/g, \"(\\$1) \\$2-\\$3\");\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('groupName', function() {\n  return function(group) {\n    var items, title;\n    if ((group == null) || group === '') {\n      return '';\n    }\n    items = [\n      {\n        title: 'Administrador(a)',\n        code: 'admin'\n      }, {\n        title: 'Corretor(a)',\n        code: 'broker'\n      }\n    ];\n    title = '';\n    items.map(function(item) {\n      if (item.code === group) {\n        return title = item.title;\n      }\n    });\n    return title;\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').directive('file', function() {\n  return {\n    require: \"ngModel\",\n    restrict: 'A',\n    link: function($scope, elem, attrs, ngModel) {\n      var changeHandler;\n      changeHandler = function(event) {\n        var file, files;\n        files = event.target.files;\n        file = files[0];\n        ngModel.$setViewValue(file);\n        return $scope.$apply();\n      };\n      return elem.bind('change', changeHandler);\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').controller('ClientsCtrl', [\n  '$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage', 'ClientService', function($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, ClientService) {\n    $scope.client = {};\n    $scope.clients = [];\n    $scope.edit = true;\n    $loading.show();\n    if ($stateParams.id) {\n      ClientService.get($stateParams.id).then(function(response) {\n        $scope.client = response.data;\n        $scope.edit = false;\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar clientes. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    } else {\n      ClientService.getAll().then(function(response) {\n        $scope.clients = $filter('orderBy')(response.data, '-created');\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar clientes. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    }\n    $scope.canEdit = function() {\n      return $scope.edit = true;\n    };\n    $scope.saveOrUpdate = function() {\n      if (!$rootScope.forms.client.$valid) {\n        $logger.error('Preencha todos os dados obrigatórios.');\n        return;\n      }\n      $loading.show();\n      return ClientService.saveOrUpdate($scope.client).then(function(response) {\n        $loading.hide();\n        return $state.go('dashboard.clients');\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao criar/editar cliente. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n    return $scope.doDelete = function(index) {\n      var client;\n      client = $scope.clients[index];\n      if (client._id === storage.getCode()) {\n        return false;\n      }\n      $loading.show();\n      return ClientService[\"delete\"](client._id).then(function(response) {\n        $logger.success('Cliente excluído com sucesso!');\n        $scope.clients.splice(index, 1);\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao excluir cliente. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').controller('LoginCtrl', [\n  '$scope', '$rootScope', '$state', '$logger', 'storage', 'UserService', function($scope, $rootScope, $state, $logger, storage, UserService) {\n    $scope.user = {};\n    return $scope.doLogin = function() {\n      if (!$rootScope.forms.login.$valid) {\n        $logger.error('Preencha todos os dados obrigatórios.');\n        return;\n      }\n      $scope.user.origin = 'admin';\n      return UserService.doLogin($scope.user).then(function(response) {\n        storage.setCodes(response.data);\n        return $state.go('dashboard.home');\n      })[\"catch\"](function(response) {\n        return $logger.error('Usuário e/ou senha inválido(s).');\n      });\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').controller('UsersCtrl', [\n  '$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage', 'UserGroupService', 'UserService', function($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, UserGroupService, UserService) {\n    $scope.user = {};\n    $scope.users = [];\n    $scope.groups = UserGroupService.getAll();\n    $scope.edit = true;\n    $loading.show();\n    if ($stateParams.id) {\n      UserService.get($stateParams.id).then(function(response) {\n        $scope.user = response.data;\n        $scope.edit = false;\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar usuários. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    } else {\n      UserService.getAll().then(function(response) {\n        $scope.users = $filter('orderBy')(response.data, '-created');\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar usuários. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    }\n    $scope.canEdit = function() {\n      return $scope.edit = true;\n    };\n    $scope.saveOrUpdate = function() {\n      if (!$rootScope.forms.user.$valid) {\n        $logger.error('Preencha todos os dados obrigatórios.');\n        return;\n      }\n      $loading.show();\n      return UserService.saveOrUpdate($scope.user).then(function(response) {\n        $loading.hide();\n        return $state.go('dashboard.users');\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao criar/editar usuário. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n    return $scope.doDelete = function(index) {\n      var user;\n      user = $scope.users[index];\n      if (user._id === storage.getCode()) {\n        return false;\n      }\n      $loading.show();\n      return UserService[\"delete\"](user._id).then(function(response) {\n        $logger.success('Usuário excluído com sucesso!');\n        $scope.users.splice(index, 1);\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao excluir usuário. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n  }\n]);\n","'use strict'\n\nangular.module('oneImobiliaria')\n.config ['$stateProvider', '$httpProvider', '$urlRouterProvider', ($stateProvider, $httpProvider, $urlRouterProvider) ->\n\n  $stateProvider\n\n  .state 'login',\n    url: '/login'\n    views:\n      main:\n        templateUrl: 'app/views/login/index.html'\n        controller: 'LoginCtrl'\n      'error@login':\n        templateUrl: 'app/views/error.html'\n    requiredLogin: false\n\n  .state 'dashboard',\n    url: '/dashboard'\n    abstract: true\n    views:\n      main: {}\n      header:\n        templateUrl: 'app/views/header.html'\n      footer:\n        templateUrl: 'app/views/footer.html'\n    requiredLogin: true\n\n  .state 'dashboard.home',\n    url: '/home'\n    views:\n      'main@':\n        templateUrl: 'app/views/home/index.html'\n    requiredLogin: true\n\n  .state 'dashboard.users',\n    url: '/users'\n    views:\n      'main@':\n        templateUrl: 'app/views/users/index.html'\n        controller: 'UsersCtrl'\n      'submenu@dashboard.users':\n        templateUrl: 'app/views/users/submenu.html'\n      'error@dashboard.users':\n        templateUrl: 'app/views/error.html'\n      'success@dashboard.users':\n        templateUrl: 'app/views/success.html'\n      'loading@dashboard.users':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.users.new',\n    url: '/new'\n    views:\n      'main@':\n        templateUrl: 'app/views/users/form.html'\n        controller: 'UsersCtrl'\n      'error@dashboard.users.new':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.users.new':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.users.edit',\n    url: '/edit/:id'\n    views:\n      'main@':\n        templateUrl: 'app/views/users/form.html'\n        controller: 'UsersCtrl'\n      'error@dashboard.users.edit':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.users.edit':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.clients',\n    url: '/clients'\n    views:\n      'main@':\n        templateUrl: 'app/views/clients/index.html'\n        controller: 'ClientsCtrl'\n      'submenu@dashboard.clients':\n        templateUrl: 'app/views/clients/submenu.html'\n      'error@dashboard.clients':\n        templateUrl: 'app/views/error.html'\n      'success@dashboard.clients':\n        templateUrl: 'app/views/success.html'\n      'loading@dashboard.clients':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.clients.new',\n    url: '/new'\n    views:\n      'main@':\n        templateUrl: 'app/views/clients/form.html'\n        controller: 'ClientsCtrl'\n      'error@dashboard.clients.new':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.clients.new':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.clients.edit',\n    url: '/edit/:id'\n    views:\n      'main@':\n        templateUrl: 'app/views/clients/form.html'\n        controller: 'ClientsCtrl'\n      'error@dashboard.clients.edit':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.users.edit':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.properties',\n    url: '/properties'\n    views:\n      'main@':\n        templateUrl: 'app/views/properties/index.html'\n      'submenu@dashboard.properties':\n        templateUrl: 'app/views/properties/submenu.html'\n    requiredLogin: true\n\n  $urlRouterProvider.otherwise('/login')\n\n  # Access token injector\n  $httpProvider.interceptors.push('sessionInjector')\n\n  $httpProvider.defaults.useXDomain = true\n  $httpProvider.defaults.headers.common[\"Content-Type\"] = 'application/json'\n  delete $httpProvider.defaults.headers.common['X-Requested-With']\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'ClientService', ['$http', '$state', 'RESOURCES', ($http, $state, RESOURCES) ->\n\n  apiUrl = RESOURCES.API_URL + '/clients'\n\n  create: (user) ->\n    return $http.post apiUrl, user\n  update: (user) ->\n    return $http.put apiUrl + '/' + user._id, user\n  saveOrUpdate: (user) ->\n    if user._id then this.update(user)\n    else this.create(user)\n  getAll: () ->\n    return $http.get apiUrl\n  get: (id) ->\n    return $http.get apiUrl + '/' + id\n  delete: (id) ->\n    return $http.delete apiUrl+ '/' + id\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service '$loading', ['$rootScope', ($rootScope) ->\n\n  show: () ->\n    $rootScope.loading = true\n  hide: () ->\n    $rootScope.loading = false\n\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service '$logger', ['$rootScope', ($rootScope) ->\n\n  clean: () ->\n    $rootScope.success = false\n    $rootScope.error = false\n    $rootScope.modalError = false\n  error: (errorString) ->\n    this.clean()\n    $rootScope.error = errorString\n  modalError: (errorString) ->\n    this.clean()\n    $rootScope.modalError = errorString\n  success: (successString) ->\n    this.clean()\n    $rootScope.success = successString\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'sessionInjector', ['storage', (storage) ->\n\n  isUnloggedPage = (config) ->\n    return (config.url.indexOf('auth') > -1 or config.url.indexOf('remember') > -1)\n\n  request: (config)->\n    if !isUnloggedPage(config)\n      config.headers['x-access-token'] = storage.getSessionToken()\n    return config\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'storage', () ->\n  isLogged: () ->\n    return (localStorage.getItem('x-code-one') != null) && (localStorage.getItem('code-one') != null)\n  setCodes: (codes) ->\n    localStorage.setItem('x-code-one', codes.token)\n    localStorage.setItem('code-one', codes.code)\n    localStorage.setItem('group-one', codes.type)\n    localStorage.setItem('name-one', codes.name)\n  getSessionToken: () ->\n    localStorage.getItem('x-code-one')\n  getCode: () ->\n    localStorage.getItem('code-one')\n  clean: () ->\n    localStorage.removeItem('x-code-one')\n    localStorage.removeItem('code-one')\n    localStorage.removeItem('group-one')\n    localStorage.removeItem('name-one')","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'groupName', () ->\n  (group) ->\n\n    return '' if not group? or group == ''\n    items = [\n      {title: 'Administrador(a)', code: 'admin'},\n      {title: 'Corretor(a)', code: 'broker'}\n    ]\n\n    title = ''\n    items.map (item) ->\n      title = item.title if item.code == group\n\n    return title","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'UserService', ['$http', '$state', 'storage', 'RESOURCES', ($http, $state, storage, RESOURCES) ->\n\n  apiUrl = RESOURCES.API_URL + '/accounts'\n\n  isLogged: () ->\n    return storage.isLogged()\n  doLogin: (user) ->\n    return $http.post apiUrl + '/auth', user\n  doLogout: () ->\n      storage.clean()\n      $state.go('login')\n      return\n  create: (user) ->\n    return $http.post apiUrl, user\n  update: (user) ->\n    return $http.put apiUrl + '/' + user._id, user\n  saveOrUpdate: (user) ->\n    if user._id then this.update(user)\n    else this.create(user)\n  getAll: () ->\n    return $http.get apiUrl\n  get: (id) ->\n    return $http.get apiUrl + '/' + id\n  delete: (id) ->\n    return $http.delete apiUrl+ '/' + id\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'dateBr', () ->\n  (input) ->\n\n    return '' if not input?\n    date = input.split('T')\n\n    moment(date[0]).format('DD/MM/YYYY')","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'dateTimeBr', () ->\n  (input) ->\n    return '' if not input?\n    moment.locale('pt-br')\n    moment(input).calendar(null, {sameElse: 'DD/MM/YYYY - H:mm'})","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'firstName', () ->\n  (name) ->\n\n    return '' if not name? or name == ''\n    names = name.split(' ')\n    return names[0]","'use strict';\n\nangular.module('oneImobiliaria')\n.filter 'phoneBr', () ->\n  (input) ->\n    return '' if not input?\n\n    if input.length == 10\n        return input.replace(/(\\d{2})(\\d{4})(\\d{4})/g,\"(\\$1) \\$2-\\$3\")\n    else\n        return input.replace(/(\\d{2})(\\d{5})(\\d{4})/g,\"(\\$1) \\$2-\\$3\")","'use strict'\n\nangular.module('oneImobiliaria')\n.directive 'file', () ->\n  require: \"ngModel\"\n  restrict: 'A'\n  link: ($scope, elem, attrs, ngModel) ->\n\n    changeHandler = (event) ->\n      files = event.target.files\n      file = files[0]\n\n      ngModel.$setViewValue(file)\n      $scope.$apply()\n\n    elem.bind('change', changeHandler)","'use strict'\n\nangular.module('oneImobiliaria')\n.controller 'ClientsCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage', 'ClientService', ($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, ClientService) ->\n\n  $scope.client = {}\n  $scope.clients = []\n\n  $scope.edit = true\n\n  $loading.show()\n  if $stateParams.id\n    ClientService.get($stateParams.id)\n    .then (response) ->\n      $scope.client = response.data\n      $scope.edit = false\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar clientes. Por favor, atualize a página.')\n      $loading.hide()\n  else\n    ClientService.getAll()\n    .then (response) ->\n      $scope.clients = $filter('orderBy')(response.data, '-created')\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar clientes. Por favor, atualize a página.')\n      $loading.hide()\n\n  $scope.canEdit = () ->\n    $scope.edit = true\n\n  $scope.saveOrUpdate = () ->\n    if !$rootScope.forms.client.$valid\n      $logger.error('Preencha todos os dados obrigatórios.')\n      return\n\n    $loading.show()\n    ClientService.saveOrUpdate($scope.client)\n    .then (response) ->\n      $loading.hide()\n      $state.go('dashboard.clients')\n    .catch (response) ->\n      $logger.error('Erro ao criar/editar cliente. Por favor, tente novamente.')\n      $loading.hide()\n\n  $scope.doDelete = (index) ->\n\n    client = $scope.clients[index]\n    return false if client._id == storage.getCode()\n\n    $loading.show()\n    ClientService.delete(client._id)\n    .then (response) ->\n      $logger.success('Cliente excluído com sucesso!')\n      $scope.clients.splice(index, 1)\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao excluir cliente. Por favor, tente novamente.')\n      $loading.hide()\n\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.controller 'LoginCtrl', ['$scope', '$rootScope', '$state', '$logger', 'storage', 'UserService', ($scope, $rootScope, $state, $logger, storage, UserService) ->\n\n  $scope.user = {}\n\n  $scope.doLogin = () ->\n    if !$rootScope.forms.login.$valid\n      $logger.error('Preencha todos os dados obrigatórios.')\n      return\n\n    $scope.user.origin = 'admin'\n    UserService.doLogin($scope.user)\n    .then (response) ->\n      storage.setCodes(response.data)\n      $state.go('dashboard.home')\n    .catch (response) ->\n      $logger.error('Usuário e/ou senha inválido(s).')\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.controller 'UsersCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage','UserGroupService', 'UserService', ($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, UserGroupService, UserService) ->\n\n  $scope.user = {}\n  $scope.users = []\n\n  $scope.groups = UserGroupService.getAll()\n  $scope.edit = true\n\n  $loading.show()\n  if $stateParams.id\n    UserService.get($stateParams.id)\n    .then (response) ->\n      $scope.user = response.data\n      $scope.edit = false\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar usuários. Por favor, atualize a página.')\n      $loading.hide()\n  else\n    UserService.getAll()\n    .then (response) ->\n      $scope.users = $filter('orderBy')(response.data, '-created')\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar usuários. Por favor, atualize a página.')\n      $loading.hide()\n\n  $scope.canEdit = () ->\n    $scope.edit = true\n\n  $scope.saveOrUpdate = () ->\n    if !$rootScope.forms.user.$valid\n      $logger.error('Preencha todos os dados obrigatórios.')\n      return\n\n    $loading.show()\n    UserService.saveOrUpdate($scope.user)\n    .then (response) ->\n      $loading.hide()\n      $state.go('dashboard.users')\n    .catch (response) ->\n      $logger.error('Erro ao criar/editar usuário. Por favor, tente novamente.')\n      $loading.hide()\n\n  $scope.doDelete = (index) ->\n\n    user = $scope.users[index]\n    return false if user._id == storage.getCode()\n\n    $loading.show()\n    UserService.delete(user._id)\n    .then (response) ->\n      $logger.success('Usuário excluído com sucesso!')\n      $scope.users.splice(index, 1)\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao excluir usuário. Por favor, tente novamente.')\n      $loading.hide()\n\n]"]}