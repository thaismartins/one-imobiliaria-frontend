{"version":3,"sources":["app.coffee","app.js","routes.coffee","client.coffee","loading.coffee","location.coffee","logger.coffee","property-type.coffee","property.coffee","session.coffee","storage.coffee","user-group.coffee","user.coffee","date-br.coffee","date-time-br.coffee","first-name.coffee","meters.coffee","order-by-string.coffee","phone-br.coffee","range.coffee","yes-or-no.coffee","file.coffee","account.coffee","clients.coffee","login.coffee","properties.coffee","users.coffee"],"names":["angular","module","run","$rootScope","$state","RESOURCES","storage","UserService","error","success","loading","fileUrl","API_URL","page","name","showMenu","showSubmenu","appTitle","forms","doLogout","toggleMenu","toggleSubmenu","$on","current","split","group","getGroup","getName","requiredLogin","isLogged","go","constant","config","$stateProvider","$httpProvider","$urlRouterProvider","state","url","views","main","templateUrl","controller","error@login","abstract","header","footer","main@","submenu@dashboard.users","error@dashboard.users","success@dashboard.users","loading@dashboard.users","error@dashboard.users.new","loading@dashboard.users.new","error@dashboard.users.edit","loading@dashboard.users.edit","submenu@dashboard.clients","error@dashboard.clients","success@dashboard.clients","loading@dashboard.clients","error@dashboard.clients.new","loading@dashboard.clients.new","error@dashboard.clients.edit","submenu@dashboard.properties","error@dashboard.properties","success@dashboard.properties","loading@dashboard.properties","error@dashboard.properties.new","loading@dashboard.properties.new","error@dashboard.properties.edit","loading@dashboard.properties.edit","error@dashboard.account","loading@dashboard.account","otherwise","interceptors","push","defaults","useXDomain","headers","common","service","$http","apiUrl","create","client","post","update","put","_id","saveOrUpdate","this","getAll","get","id","delete","show","hide","getAllStates","getCitiesByState","clean","modalError","errorString","successString","items","title","code","property","isUnloggedPage","indexOf","request","getSessionToken","localStorage","getItem","setCodes","codes","setItem","token","type","updateToken","getCode","removeItem","doLogin","user","getMyAccount","filter","input","date","moment","format","locale","calendar","sameElse","names","meters","array","reverse","result","sort","object1","object2","isUndefined","localeCompare","length","replace","PropertyTypeService","propertyType","map","item","n","i","j","ref","res","UserGroupService","directive","require","restrict","link","$scope","elem","attrs","ngModel","changeHandler","event","file","files","target","$setViewValue","$apply","bind","$parse","scope","formatter","console","log","$modelValue","value","toString","$formatters","$parsers","newValue","assign","$viewValue","$render","$loading","$logger","edit","then","response","data","canEdit","doUpdate","$valid","$stateParams","$filter","ClientService","clients","doDelete","index","splice","login","origin","PropertyService","LocationService","cities","vacancy","floor","address","street","number","city","neighborhood","cep","hasSubway","subwayStation","condominium","iptu","location","payments","exchange","difference","carValue","settled","car","properties","states","currentCities","showCities","users","groups"],"mappings":"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","file":"app.min.js","sourcesContent":["'use strict'\n\nangular.module 'oneImobiliaria', [\n  'ui.router',\n  'ui.utils.masks'\n]\n.run ['$rootScope', '$state', 'RESOURCES', 'storage', 'UserService', ($rootScope, $state, RESOURCES, storage, UserService) ->\n\n  $rootScope.error = false\n  $rootScope.success = false\n  $rootScope.loading = false\n\n  $rootScope.fileUrl = RESOURCES.API_URL + '/'\n\n  $rootScope.page = ''\n  $rootScope.name = ''\n\n  $rootScope.showMenu = false\n  $rootScope.showSubmenu = false\n\n  $rootScope.appTitle = 'One Consultoria Imobiliária'\n\n  $rootScope.forms = {}\n\n  $rootScope.doLogout = () ->\n    UserService.doLogout()\n\n  $rootScope.toggleMenu = () ->\n    $rootScope.showMenu = !$rootScope.showMenu\n\n  $rootScope.toggleSubmenu = () ->\n    $rootScope.showSubmenu = !$rootScope.showSubmenu\n\n  $rootScope.$on '$stateChangeSuccess', () ->\n\n    page = $state.current.name.split('.')\n    $rootScope.page = page[1] || ''\n\n    $rootScope.group = storage.getGroup()\n    $rootScope.name = storage.getName()\n\n    $rootScope.error = false\n    $rootScope.success = false\n    $rootScope.loading = false\n    $rootScope.showMenu = false\n    $rootScope.showSubmenu = false\n\n    UserService.doLogout() if $state.current.requiredLogin && !UserService.isLogged()\n    $state.go('dashboard.home') if !$state.current.requiredLogin && UserService.isLogged()\n    $state.go('dashboard.home') if $rootScope.page == 'users' && $rootScope.group != 'admin'\n]\n.constant 'RESOURCES',\n  'API_URL': 'http://desenv.doisoitosete.com:3000/api'\n#  'API_URL': 'http://localhost:3000/api'\n","'use strict';\nangular.module('oneImobiliaria', ['ui.router', 'ui.utils.masks']).run([\n  '$rootScope', '$state', 'RESOURCES', 'storage', 'UserService', function($rootScope, $state, RESOURCES, storage, UserService) {\n    $rootScope.error = false;\n    $rootScope.success = false;\n    $rootScope.loading = false;\n    $rootScope.fileUrl = RESOURCES.API_URL + '/';\n    $rootScope.page = '';\n    $rootScope.name = '';\n    $rootScope.showMenu = false;\n    $rootScope.showSubmenu = false;\n    $rootScope.appTitle = 'One Consultoria Imobiliária';\n    $rootScope.forms = {};\n    $rootScope.doLogout = function() {\n      return UserService.doLogout();\n    };\n    $rootScope.toggleMenu = function() {\n      return $rootScope.showMenu = !$rootScope.showMenu;\n    };\n    $rootScope.toggleSubmenu = function() {\n      return $rootScope.showSubmenu = !$rootScope.showSubmenu;\n    };\n    return $rootScope.$on('$stateChangeSuccess', function() {\n      var page;\n      page = $state.current.name.split('.');\n      $rootScope.page = page[1] || '';\n      $rootScope.group = storage.getGroup();\n      $rootScope.name = storage.getName();\n      $rootScope.error = false;\n      $rootScope.success = false;\n      $rootScope.loading = false;\n      $rootScope.showMenu = false;\n      $rootScope.showSubmenu = false;\n      if ($state.current.requiredLogin && !UserService.isLogged()) {\n        UserService.doLogout();\n      }\n      if (!$state.current.requiredLogin && UserService.isLogged()) {\n        $state.go('dashboard.home');\n      }\n      if ($rootScope.page === 'users' && $rootScope.group !== 'admin') {\n        return $state.go('dashboard.home');\n      }\n    });\n  }\n]).constant('RESOURCES', {\n  'API_URL': 'http://desenv.doisoitosete.com:3000/api'\n});\n\n'use strict';\nangular.module('oneImobiliaria').config([\n  '$stateProvider', '$httpProvider', '$urlRouterProvider', function($stateProvider, $httpProvider, $urlRouterProvider) {\n    $stateProvider.state('login', {\n      url: '/login',\n      views: {\n        main: {\n          templateUrl: 'app/views/login/index.html',\n          controller: 'LoginCtrl'\n        },\n        'error@login': {\n          templateUrl: 'app/views/error.html'\n        }\n      },\n      requiredLogin: false\n    }).state('dashboard', {\n      url: '/dashboard',\n      abstract: true,\n      views: {\n        main: {},\n        header: {\n          templateUrl: 'app/views/header.html'\n        },\n        footer: {\n          templateUrl: 'app/views/footer.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.home', {\n      url: '/home',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/home/index.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.users', {\n      url: '/users',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/users/index.html',\n          controller: 'UsersCtrl'\n        },\n        'submenu@dashboard.users': {\n          templateUrl: 'app/views/users/submenu.html'\n        },\n        'error@dashboard.users': {\n          templateUrl: 'app/views/error.html'\n        },\n        'success@dashboard.users': {\n          templateUrl: 'app/views/success.html'\n        },\n        'loading@dashboard.users': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.users.new', {\n      url: '/new',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/users/form.html',\n          controller: 'UsersCtrl'\n        },\n        'error@dashboard.users.new': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.users.new': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.users.edit', {\n      url: '/edit/:id',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/users/form.html',\n          controller: 'UsersCtrl'\n        },\n        'error@dashboard.users.edit': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.users.edit': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.clients', {\n      url: '/clients',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/clients/index.html',\n          controller: 'ClientsCtrl'\n        },\n        'submenu@dashboard.clients': {\n          templateUrl: 'app/views/clients/submenu.html'\n        },\n        'error@dashboard.clients': {\n          templateUrl: 'app/views/error.html'\n        },\n        'success@dashboard.clients': {\n          templateUrl: 'app/views/success.html'\n        },\n        'loading@dashboard.clients': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.clients.new', {\n      url: '/new',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/clients/form.html',\n          controller: 'ClientsCtrl'\n        },\n        'error@dashboard.clients.new': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.clients.new': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.clients.edit', {\n      url: '/edit/:id',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/clients/form.html',\n          controller: 'ClientsCtrl'\n        },\n        'error@dashboard.clients.edit': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.users.edit': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.properties', {\n      url: '/properties',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/properties/index.html',\n          controller: 'PropertiesCtrl'\n        },\n        'submenu@dashboard.properties': {\n          templateUrl: 'app/views/properties/submenu.html'\n        },\n        'error@dashboard.properties': {\n          templateUrl: 'app/views/error.html'\n        },\n        'success@dashboard.properties': {\n          templateUrl: 'app/views/success.html'\n        },\n        'loading@dashboard.properties': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.properties.new', {\n      url: '/new',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/properties/form.html',\n          controller: 'PropertiesCtrl'\n        },\n        'error@dashboard.properties.new': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.properties.new': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.properties.edit', {\n      url: '/edit/:id',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/properties/form.html',\n          controller: 'PropertiesCtrl'\n        },\n        'error@dashboard.properties.edit': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.properties.edit': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    }).state('dashboard.account', {\n      url: '/account',\n      views: {\n        'main@': {\n          templateUrl: 'app/views/account/form.html',\n          controller: 'AccountCtrl'\n        },\n        'error@dashboard.account': {\n          templateUrl: 'app/views/error.html'\n        },\n        'loading@dashboard.account': {\n          templateUrl: 'app/views/loading.html'\n        }\n      },\n      requiredLogin: true\n    });\n    $urlRouterProvider.otherwise('/login');\n    $httpProvider.interceptors.push('sessionInjector');\n    $httpProvider.defaults.useXDomain = true;\n    $httpProvider.defaults.headers.common[\"Content-Type\"] = 'application/json';\n    return delete $httpProvider.defaults.headers.common['X-Requested-With'];\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('ClientService', [\n  '$http', '$state', 'RESOURCES', function($http, $state, RESOURCES) {\n    var apiUrl;\n    apiUrl = RESOURCES.API_URL + '/clients';\n    return {\n      create: function(client) {\n        return $http.post(apiUrl, client);\n      },\n      update: function(client) {\n        return $http.put(apiUrl + '/' + client._id, client);\n      },\n      saveOrUpdate: function(client) {\n        if (client._id) {\n          return this.update(client);\n        } else {\n          return this.create(client);\n        }\n      },\n      getAll: function() {\n        return $http.get(apiUrl);\n      },\n      get: function(id) {\n        return $http.get(apiUrl + '/' + id);\n      },\n      \"delete\": function(id) {\n        return $http[\"delete\"](apiUrl + '/' + id);\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('$loading', [\n  '$rootScope', function($rootScope) {\n    return {\n      show: function() {\n        return $rootScope.loading = true;\n      },\n      hide: function() {\n        return $rootScope.loading = false;\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('LocationService', [\n  '$http', '$state', 'RESOURCES', function($http, $state, RESOURCES) {\n    var apiUrl;\n    apiUrl = RESOURCES.API_URL + '/cities';\n    return {\n      getAll: function() {\n        return $http.get(apiUrl);\n      },\n      getAllStates: function() {\n        return $http.get(apiUrl + '/states');\n      },\n      getCitiesByState: function(state) {\n        return $http.get(apiUrl + '/states/' + state);\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('$logger', [\n  '$rootScope', function($rootScope) {\n    return {\n      clean: function() {\n        $rootScope.success = false;\n        $rootScope.error = false;\n        return $rootScope.modalError = false;\n      },\n      error: function(errorString) {\n        this.clean();\n        return $rootScope.error = errorString;\n      },\n      modalError: function(errorString) {\n        this.clean();\n        return $rootScope.modalError = errorString;\n      },\n      success: function(successString) {\n        this.clean();\n        return $rootScope.success = successString;\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('PropertyTypeService', function() {\n  var items;\n  items = [\n    {\n      title: 'Apartamento',\n      code: 'apartament'\n    }, {\n      title: 'Casa',\n      code: 'house'\n    }, {\n      title: 'Terreno',\n      code: 'land'\n    }, {\n      title: 'Casa',\n      code: 'house'\n    }, {\n      title: 'Carro',\n      code: 'car'\n    }\n  ];\n  return {\n    getAll: function() {\n      return items;\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').service('PropertyService', [\n  '$http', '$state', 'RESOURCES', function($http, $state, RESOURCES) {\n    var apiUrl;\n    apiUrl = RESOURCES.API_URL + '/properties';\n    return {\n      create: function(property) {\n        return $http.post(apiUrl, property);\n      },\n      update: function(property) {\n        return $http.put(apiUrl + '/' + property._id, property);\n      },\n      saveOrUpdate: function(property) {\n        if (property._id) {\n          return this.update(property);\n        } else {\n          return this.create(property);\n        }\n      },\n      getAll: function() {\n        return $http.get(apiUrl);\n      },\n      get: function(id) {\n        return $http.get(apiUrl + '/' + id);\n      },\n      \"delete\": function(id) {\n        return $http[\"delete\"](apiUrl + '/' + id);\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('sessionInjector', [\n  'storage', function(storage) {\n    var isUnloggedPage;\n    isUnloggedPage = function(config) {\n      return config.url.indexOf('auth') > -1 || config.url.indexOf('remember') > -1;\n    };\n    return {\n      request: function(config) {\n        if (!isUnloggedPage(config)) {\n          config.headers['x-access-token'] = storage.getSessionToken();\n        }\n        return config;\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').service('storage', function() {\n  return {\n    isLogged: function() {\n      return (localStorage.getItem('x-code-one') !== null) && (localStorage.getItem('code-one') !== null);\n    },\n    setCodes: function(codes) {\n      localStorage.setItem('x-code-one', codes.token);\n      localStorage.setItem('code-one', codes.code);\n      localStorage.setItem('group-one', codes.type);\n      return localStorage.setItem('name-one', codes.name);\n    },\n    updateToken: function(token) {\n      return localStorage.setItem('x-code-one', token);\n    },\n    getSessionToken: function() {\n      return localStorage.getItem('x-code-one');\n    },\n    getCode: function() {\n      return localStorage.getItem('code-one');\n    },\n    getName: function() {\n      return localStorage.getItem('name-one') || '';\n    },\n    getGroup: function() {\n      return localStorage.getItem('group-one') || '';\n    },\n    clean: function() {\n      localStorage.removeItem('x-code-one');\n      localStorage.removeItem('code-one');\n      localStorage.removeItem('group-one');\n      return localStorage.removeItem('name-one');\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').service('UserGroupService', function() {\n  var items;\n  items = [\n    {\n      title: 'Administrador(a)',\n      code: 'admin'\n    }, {\n      title: 'Corretor(a)',\n      code: 'broker'\n    }\n  ];\n  return {\n    getAll: function() {\n      return items;\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').service('UserService', [\n  '$http', '$state', 'storage', 'RESOURCES', function($http, $state, storage, RESOURCES) {\n    var apiUrl;\n    apiUrl = RESOURCES.API_URL + '/accounts';\n    return {\n      isLogged: function() {\n        return storage.isLogged();\n      },\n      doLogin: function(user) {\n        return $http.post(apiUrl + '/auth', user);\n      },\n      doLogout: function() {\n        storage.clean();\n        $state.go('login');\n      },\n      create: function(user) {\n        return $http.post(apiUrl, user);\n      },\n      update: function(user) {\n        return $http.put(apiUrl + '/' + user._id, user);\n      },\n      saveOrUpdate: function(user) {\n        if (user._id) {\n          return this.update(user);\n        } else {\n          return this.create(user);\n        }\n      },\n      getAll: function() {\n        return $http.get(apiUrl);\n      },\n      get: function(id) {\n        return $http.get(apiUrl + '/' + id);\n      },\n      getMyAccount: function() {\n        return $http.get(apiUrl + '/' + storage.getCode());\n      },\n      \"delete\": function(id) {\n        return $http[\"delete\"](apiUrl + '/' + id);\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').filter('dateBr', function() {\n  return function(input) {\n    var date;\n    if (input == null) {\n      return '';\n    }\n    date = input.split('T');\n    return moment(date[0]).format('DD/MM/YYYY');\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('dateTimeBr', function() {\n  return function(input) {\n    if (input == null) {\n      return '';\n    }\n    moment.locale('pt-br');\n    return moment(input).calendar(null, {\n      sameElse: 'DD/MM/YYYY - H:mm'\n    });\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('firstName', function() {\n  return function(name) {\n    var names;\n    if ((name == null) || name === '') {\n      return '';\n    }\n    names = name.split(' ');\n    return names[0];\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('meters', function() {\n  return function(meters) {\n    if ((meters == null) || meters === '') {\n      meters = '0';\n    }\n    return meters + ' m²';\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('orderByString', function() {\n  return function(array, property, reverse) {\n    var result;\n    result = array.sort(function(object1, object2) {\n      if (angular.isUndefined(property)) {\n        object1.localeCompare(object2);\n      }\n      return object1[property].localeCompare(object2[property]);\n    });\n    if (reverse) {\n      return result.reverse();\n    } else {\n      return result;\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('phoneBr', function() {\n  return function(input) {\n    if (input == null) {\n      return '';\n    }\n    if (input.length === 10) {\n      return input.replace(/(\\d{2})(\\d{4})(\\d{4})/g, \"(\\$1) \\$2-\\$3\");\n    } else {\n      return input.replace(/(\\d{2})(\\d{5})(\\d{4})/g, \"(\\$1) \\$2-\\$3\");\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('propertyType', [\n  'PropertyTypeService', function(PropertyTypeService) {\n    return function(propertyType) {\n      var items, title;\n      if ((propertyType == null) || propertyType === '') {\n        return '';\n      }\n      items = PropertyTypeService.getAll();\n      title = '';\n      items.map(function(item) {\n        if (item.code === propertyType) {\n          return title = item.title;\n        }\n      });\n      return title;\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').filter('range', function() {\n  return function(n) {\n    var i, j, ref, res;\n    res = [];\n    for (i = j = 1, ref = n + 1; j < ref; i = j += 1) {\n      res.push(i);\n    }\n    return res;\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').filter('groupName', [\n  'UserGroupService', function(UserGroupService) {\n    return function(group) {\n      var items, title;\n      if ((group == null) || group === '') {\n        return '';\n      }\n      items = UserGroupService.getAll();\n      title = '';\n      items.map(function(item) {\n        if (item.code === group) {\n          return title = item.title;\n        }\n      });\n      return title;\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').filter('yesOrNo', function() {\n  return function(type) {\n    if (type) {\n      return 'Sim';\n    } else {\n      return 'Não';\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').directive('file', function() {\n  return {\n    require: \"ngModel\",\n    restrict: 'A',\n    link: function($scope, elem, attrs, ngModel) {\n      var changeHandler;\n      changeHandler = function(event) {\n        var file, files;\n        files = event.target.files;\n        file = files[0];\n        ngModel.$setViewValue(file);\n        return $scope.$apply();\n      };\n      return elem.bind('change', changeHandler);\n    }\n  };\n});\n\n'use strict';\nangular.module('oneImobiliaria').directive('meters', [\n  '$parse', function($parse) {\n    return {\n      require: \"?ngModel\",\n      scope: {\n        ngModel: '='\n      },\n      restrict: 'A',\n      link: function($scope, elem, attrs, ngModel) {\n        var changeHandler, formatter;\n        console.log(ngModel.$modelValue);\n        formatter = function(value) {\n          if (value == null) {\n            value = 0;\n          }\n          value = value.toString().replace('m²', '');\n          value = value.toString().replace(/\\D/g, '');\n          return value + 'm²';\n        };\n        ngModel.$formatters.push(function(value) {\n          console.log(value);\n          return formatter(value);\n        });\n        ngModel.$parsers.push(function(value) {\n          return value.toString().replace('m²', '');\n        });\n        changeHandler = function() {\n          var newValue;\n          newValue = formatter(ngModel.$modelValue);\n          console.log(newValue);\n          $parse(attrs.ngModel).assign($scope, newValue);\n          ngModel.$viewValue = newValue;\n          return ngModel.$render();\n        };\n        return elem.bind('keyup', changeHandler);\n      }\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').controller('AccountCtrl', [\n  '$scope', '$rootScope', '$loading', '$logger', 'storage', 'UserService', function($scope, $rootScope, $loading, $logger, storage, UserService) {\n    $scope.user = {};\n    $scope.edit = false;\n    $loading.show();\n    UserService.getMyAccount().then(function(response) {\n      $scope.user = response.data;\n      return $loading.hide();\n    })[\"catch\"](function(response) {\n      $logger.error('Erro ao buscar sua conta. Por favor, atualize a página.');\n      return $loading.hide();\n    });\n    $scope.canEdit = function() {\n      return $scope.edit = true;\n    };\n    return $scope.doUpdate = function() {\n      if (!$rootScope.forms.user.$valid) {\n        $logger.error('Preencha todos os dados obrigatórios.');\n        return;\n      }\n      console.log($scope.user);\n      $loading.show();\n      return UserService.update($scope.user).then(function(response) {\n        $logger.success('Sua conta foi atualizada com sucesso!');\n        storage.updateToken(response.data.token);\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao editar sua conta. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').controller('ClientsCtrl', [\n  '$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage', 'ClientService', function($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, ClientService) {\n    $scope.client = {};\n    $scope.clients = [];\n    $scope.edit = true;\n    $loading.show();\n    if ($stateParams.id) {\n      ClientService.get($stateParams.id).then(function(response) {\n        $scope.client = response.data;\n        $scope.edit = false;\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar clientes. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    } else {\n      ClientService.getAll().then(function(response) {\n        $scope.clients = $filter('orderBy')(response.data, '-created');\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar clientes. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    }\n    $scope.canEdit = function() {\n      return $scope.edit = true;\n    };\n    $scope.saveOrUpdate = function() {\n      if (!$rootScope.forms.client.$valid) {\n        $logger.error('Preencha todos os dados obrigatórios.');\n        return;\n      }\n      $loading.show();\n      return ClientService.saveOrUpdate($scope.client).then(function(response) {\n        $loading.hide();\n        return $state.go('dashboard.clients');\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao criar/editar cliente. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n    return $scope.doDelete = function(index) {\n      var client;\n      client = $scope.clients[index];\n      if (client._id === storage.getCode()) {\n        return false;\n      }\n      $loading.show();\n      return ClientService[\"delete\"](client._id).then(function(response) {\n        $logger.success('Cliente excluído com sucesso!');\n        $scope.clients.splice(index, 1);\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao excluir cliente. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').controller('LoginCtrl', [\n  '$scope', '$rootScope', '$state', '$logger', 'storage', 'UserService', function($scope, $rootScope, $state, $logger, storage, UserService) {\n    $scope.user = {};\n    return $scope.doLogin = function() {\n      if (!$rootScope.forms.login.$valid) {\n        $logger.error('Preencha todos os dados obrigatórios.');\n        return;\n      }\n      $scope.user.origin = 'admin';\n      return UserService.doLogin($scope.user).then(function(response) {\n        storage.setCodes(response.data);\n        return $state.go('dashboard.home');\n      })[\"catch\"](function(response) {\n        return $logger.error('Usuário e/ou senha inválido(s).');\n      });\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').controller('PropertiesCtrl', [\n  '$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage', 'PropertyService', 'LocationService', 'ClientService', function($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, PropertyService, LocationService, ClientService) {\n    var cities;\n    $scope.property = {\n      \"code\": \"123\",\n      \"client\": \"585ecf5bd5af8351e3b894e3\",\n      \"type\": \"apartament\",\n      \"meters\": 100,\n      \"vacancy\": \"1\",\n      \"floor\": \"2\",\n      \"address\": {\n        \"street\": \"Rua Teste\",\n        \"number\": \"123\",\n        \"state\": \"SP\",\n        \"city\": \"São Paulo\",\n        \"neighborhood\": \"Jardim Teste\",\n        \"cep\": \"03952020\"\n      },\n      \"hasSubway\": true,\n      \"subwayStation\": \"Penha\",\n      \"value\": 1,\n      \"condominium\": 2,\n      \"iptu\": 3,\n      \"location\": 4,\n      \"payments\": [\"financing\", \"money\", \"others\"],\n      \"exchange\": 0.1,\n      \"difference\": 0.5,\n      \"carValue\": 5,\n      \"settled\": true,\n      \"car\": true\n    };\n    $scope.properties = [];\n    $scope.cities = [];\n    $scope.states = [];\n    $scope.clients = [];\n    cities = [];\n    $scope.edit = true;\n    $loading.show();\n    if ($stateParams.id) {\n      PropertyService.get($stateParams.id).then(function(response) {\n        $scope.property = response.data;\n        return LocationService.getAllStates();\n      }).then(function(response) {\n        $scope.states = response.data.sort();\n        return LocationService.getCitiesByState($scope.property.address.state);\n      }).then(function(response) {\n        var currentCities;\n        currentCities = $filter('orderByString')(response.data, 'name');\n        $scope.cities = currentCities;\n        cities[$scope.property.address.state] = currentCities;\n        return ClientService.getAll();\n      }).then(function(response) {\n        $scope.clients = $filter('orderByString')(response.data, 'name');\n        $scope.edit = false;\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar imóveis. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    } else {\n      PropertyService.getAll().then(function(response) {\n        $scope.properties = $filter('orderBy')(response.data, '-created');\n        return LocationService.getAllStates();\n      }).then(function(response) {\n        $scope.states = response.data.sort();\n        return ClientService.getAll();\n      }).then(function(response) {\n        $scope.clients = $filter('orderByString')(response.data, 'name');\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar imóveis. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    }\n    $scope.showCities = function(state) {\n      if (cities[state] != null) {\n        $scope.cities = cities[state];\n        return false;\n      }\n      $loading.show();\n      return LocationService.getCitiesByState(state).then(function(response) {\n        var currentCities;\n        currentCities = $filter('orderByString')(response.data, 'name');\n        $scope.cities = currentCities;\n        cities[state] = currentCities;\n        return $loading.hide();\n      })[\"catch\"](function() {\n        return $loading.hide();\n      });\n    };\n    $scope.canEdit = function() {\n      return $scope.edit = true;\n    };\n    $scope.saveOrUpdate = function() {\n      if (!$rootScope.forms.property.$valid) {\n        $logger.error('Preencha todos os dados obrigatórios.');\n        return;\n      }\n      $loading.show();\n      return PropertyService.saveOrUpdate($scope.property).then(function(response) {\n        $loading.hide();\n        return $state.go('dashboard.properties');\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao criar/editar imóvel. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n    return $scope.doDelete = function(index) {\n      var property;\n      property = $scope.properties[index];\n      if (property._id === storage.getCode()) {\n        return false;\n      }\n      $loading.show();\n      return PropertyService[\"delete\"](property._id).then(function(response) {\n        $logger.success('Imóvel excluído com sucesso!');\n        $scope.properties.splice(index, 1);\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao excluir imóvel. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n  }\n]);\n\n'use strict';\nangular.module('oneImobiliaria').controller('UsersCtrl', [\n  '$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage', 'UserGroupService', 'UserService', function($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, UserGroupService, UserService) {\n    $scope.user = {};\n    $scope.users = [];\n    $scope.groups = UserGroupService.getAll();\n    $scope.edit = true;\n    $loading.show();\n    if ($stateParams.id) {\n      UserService.get($stateParams.id).then(function(response) {\n        $scope.user = response.data;\n        $scope.edit = false;\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar usuários. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    } else {\n      UserService.getAll().then(function(response) {\n        $scope.users = $filter('orderBy')(response.data, '-created');\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao buscar usuários. Por favor, atualize a página.');\n        return $loading.hide();\n      });\n    }\n    $scope.canEdit = function() {\n      return $scope.edit = true;\n    };\n    $scope.saveOrUpdate = function() {\n      if (!$rootScope.forms.user.$valid) {\n        $logger.error('Preencha todos os dados obrigatórios.');\n        return;\n      }\n      $loading.show();\n      return UserService.saveOrUpdate($scope.user).then(function(response) {\n        $loading.hide();\n        return $state.go('dashboard.users');\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao criar/editar usuário. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n    return $scope.doDelete = function(index) {\n      var user;\n      user = $scope.users[index];\n      if (user._id === storage.getCode()) {\n        return false;\n      }\n      $loading.show();\n      return UserService[\"delete\"](user._id).then(function(response) {\n        $logger.success('Usuário excluído com sucesso!');\n        $scope.users.splice(index, 1);\n        return $loading.hide();\n      })[\"catch\"](function(response) {\n        $logger.error('Erro ao excluir usuário. Por favor, tente novamente.');\n        return $loading.hide();\n      });\n    };\n  }\n]);\n","'use strict'\n\nangular.module('oneImobiliaria')\n.config ['$stateProvider', '$httpProvider', '$urlRouterProvider', ($stateProvider, $httpProvider, $urlRouterProvider) ->\n\n  $stateProvider\n\n  .state 'login',\n    url: '/login'\n    views:\n      main:\n        templateUrl: 'app/views/login/index.html'\n        controller: 'LoginCtrl'\n      'error@login':\n        templateUrl: 'app/views/error.html'\n    requiredLogin: false\n\n  .state 'dashboard',\n    url: '/dashboard'\n    abstract: true\n    views:\n      main: {}\n      header:\n        templateUrl: 'app/views/header.html'\n      footer:\n        templateUrl: 'app/views/footer.html'\n    requiredLogin: true\n\n  .state 'dashboard.home',\n    url: '/home'\n    views:\n      'main@':\n        templateUrl: 'app/views/home/index.html'\n    requiredLogin: true\n\n  .state 'dashboard.users',\n    url: '/users'\n    views:\n      'main@':\n        templateUrl: 'app/views/users/index.html'\n        controller: 'UsersCtrl'\n      'submenu@dashboard.users':\n        templateUrl: 'app/views/users/submenu.html'\n      'error@dashboard.users':\n        templateUrl: 'app/views/error.html'\n      'success@dashboard.users':\n        templateUrl: 'app/views/success.html'\n      'loading@dashboard.users':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.users.new',\n    url: '/new'\n    views:\n      'main@':\n        templateUrl: 'app/views/users/form.html'\n        controller: 'UsersCtrl'\n      'error@dashboard.users.new':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.users.new':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.users.edit',\n    url: '/edit/:id'\n    views:\n      'main@':\n        templateUrl: 'app/views/users/form.html'\n        controller: 'UsersCtrl'\n      'error@dashboard.users.edit':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.users.edit':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.clients',\n    url: '/clients'\n    views:\n      'main@':\n        templateUrl: 'app/views/clients/index.html'\n        controller: 'ClientsCtrl'\n      'submenu@dashboard.clients':\n        templateUrl: 'app/views/clients/submenu.html'\n      'error@dashboard.clients':\n        templateUrl: 'app/views/error.html'\n      'success@dashboard.clients':\n        templateUrl: 'app/views/success.html'\n      'loading@dashboard.clients':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.clients.new',\n    url: '/new'\n    views:\n      'main@':\n        templateUrl: 'app/views/clients/form.html'\n        controller: 'ClientsCtrl'\n      'error@dashboard.clients.new':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.clients.new':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.clients.edit',\n    url: '/edit/:id'\n    views:\n      'main@':\n        templateUrl: 'app/views/clients/form.html'\n        controller: 'ClientsCtrl'\n      'error@dashboard.clients.edit':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.users.edit':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.properties',\n    url: '/properties'\n    views:\n      'main@':\n        templateUrl: 'app/views/properties/index.html'\n        controller: 'PropertiesCtrl'\n      'submenu@dashboard.properties':\n        templateUrl: 'app/views/properties/submenu.html'\n      'error@dashboard.properties':\n        templateUrl: 'app/views/error.html'\n      'success@dashboard.properties':\n        templateUrl: 'app/views/success.html'\n      'loading@dashboard.properties':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.properties.new',\n    url: '/new'\n    views:\n      'main@':\n        templateUrl: 'app/views/properties/form.html'\n        controller: 'PropertiesCtrl'\n      'error@dashboard.properties.new':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.properties.new':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.properties.edit',\n    url: '/edit/:id'\n    views:\n      'main@':\n        templateUrl: 'app/views/properties/form.html'\n        controller: 'PropertiesCtrl'\n      'error@dashboard.properties.edit':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.properties.edit':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  .state 'dashboard.account',\n    url: '/account'\n    views:\n      'main@':\n        templateUrl: 'app/views/account/form.html'\n        controller: 'AccountCtrl'\n      'error@dashboard.account':\n        templateUrl: 'app/views/error.html'\n      'loading@dashboard.account':\n        templateUrl: 'app/views/loading.html'\n    requiredLogin: true\n\n  $urlRouterProvider.otherwise('/login')\n\n  # Access token injector\n  $httpProvider.interceptors.push('sessionInjector')\n\n  $httpProvider.defaults.useXDomain = true\n  $httpProvider.defaults.headers.common[\"Content-Type\"] = 'application/json'\n  delete $httpProvider.defaults.headers.common['X-Requested-With']\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'ClientService', ['$http', '$state', 'RESOURCES', ($http, $state, RESOURCES) ->\n\n  apiUrl = RESOURCES.API_URL + '/clients'\n\n  create: (client) ->\n    return $http.post apiUrl, client\n  update: (client) ->\n    return $http.put apiUrl + '/' + client._id, client\n  saveOrUpdate: (client) ->\n    if client._id then this.update(client)\n    else this.create(client)\n  getAll: () ->\n    return $http.get apiUrl\n  get: (id) ->\n    return $http.get apiUrl + '/' + id\n  delete: (id) ->\n    return $http.delete apiUrl+ '/' + id\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service '$loading', ['$rootScope', ($rootScope) ->\n\n  show: () ->\n    $rootScope.loading = true\n  hide: () ->\n    $rootScope.loading = false\n\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'LocationService', ['$http', '$state', 'RESOURCES', ($http, $state, RESOURCES) ->\n\n  apiUrl = RESOURCES.API_URL + '/cities'\n\n  getAll: () ->\n    return $http.get apiUrl\n  getAllStates: () ->\n    return $http.get apiUrl + '/states'\n  getCitiesByState: (state) ->\n    return $http.get apiUrl + '/states/' + state\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service '$logger', ['$rootScope', ($rootScope) ->\n\n  clean: () ->\n    $rootScope.success = false\n    $rootScope.error = false\n    $rootScope.modalError = false\n  error: (errorString) ->\n    this.clean()\n    $rootScope.error = errorString\n  modalError: (errorString) ->\n    this.clean()\n    $rootScope.modalError = errorString\n  success: (successString) ->\n    this.clean()\n    $rootScope.success = successString\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'propertyType', ['PropertyTypeService', (PropertyTypeService) ->\n  (propertyType) ->\n\n    return '' if not propertyType? or propertyType == ''\n    items = PropertyTypeService.getAll()\n\n    title = ''\n    items.map (item) ->\n      title = item.title if item.code == propertyType\n\n    return title\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'PropertyService', ['$http', '$state', 'RESOURCES', ($http, $state, RESOURCES) ->\n\n  apiUrl = RESOURCES.API_URL + '/properties'\n\n  create: (property) ->\n    return $http.post apiUrl, property\n  update: (property) ->\n    return $http.put apiUrl + '/' + property._id, property\n  saveOrUpdate: (property) ->\n    if property._id then this.update(property)\n    else this.create(property)\n  getAll: () ->\n    return $http.get apiUrl\n  get: (id) ->\n    return $http.get apiUrl + '/' + id\n  delete: (id) ->\n    return $http.delete apiUrl+ '/' + id\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'sessionInjector', ['storage', (storage) ->\n\n  isUnloggedPage = (config) ->\n    return (config.url.indexOf('auth') > -1 or config.url.indexOf('remember') > -1)\n\n  request: (config)->\n    if !isUnloggedPage(config)\n      config.headers['x-access-token'] = storage.getSessionToken()\n    return config\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'storage', () ->\n  isLogged: () ->\n    return (localStorage.getItem('x-code-one') != null) && (localStorage.getItem('code-one') != null)\n  setCodes: (codes) ->\n    localStorage.setItem('x-code-one', codes.token)\n    localStorage.setItem('code-one', codes.code)\n    localStorage.setItem('group-one', codes.type)\n    localStorage.setItem('name-one', codes.name)\n  updateToken: (token) ->\n    localStorage.setItem('x-code-one', token)\n  getSessionToken: () ->\n    localStorage.getItem('x-code-one')\n  getCode: () ->\n    localStorage.getItem('code-one')\n  getName: () ->\n    localStorage.getItem('name-one') || ''\n  getGroup: () ->\n    localStorage.getItem('group-one') || ''\n  clean: () ->\n    localStorage.removeItem('x-code-one')\n    localStorage.removeItem('code-one')\n    localStorage.removeItem('group-one')\n    localStorage.removeItem('name-one')","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'groupName', ['UserGroupService', (UserGroupService) ->\n  (group) ->\n\n    return '' if not group? or group == ''\n    items = UserGroupService.getAll()\n\n    title = ''\n    items.map (item) ->\n      title = item.title if item.code == group\n\n    return title\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.service 'UserService', ['$http', '$state', 'storage', 'RESOURCES', ($http, $state, storage, RESOURCES) ->\n\n  apiUrl = RESOURCES.API_URL + '/accounts'\n\n  isLogged: () ->\n    return storage.isLogged()\n  doLogin: (user) ->\n    return $http.post apiUrl + '/auth', user\n  doLogout: () ->\n      storage.clean()\n      $state.go('login')\n      return\n  create: (user) ->\n    return $http.post apiUrl, user\n  update: (user) ->\n    return $http.put apiUrl + '/' + user._id, user\n  saveOrUpdate: (user) ->\n    if user._id then this.update(user)\n    else this.create(user)\n  getAll: () ->\n    return $http.get apiUrl\n  get: (id) ->\n    return $http.get apiUrl + '/' + id\n  getMyAccount: () ->\n    return $http.get apiUrl + '/' + storage.getCode()\n  delete: (id) ->\n    return $http.delete apiUrl+ '/' + id\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'dateBr', () ->\n  (input) ->\n\n    return '' if not input?\n    date = input.split('T')\n\n    moment(date[0]).format('DD/MM/YYYY')","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'dateTimeBr', () ->\n  (input) ->\n    return '' if not input?\n    moment.locale('pt-br')\n    moment(input).calendar(null, {sameElse: 'DD/MM/YYYY - H:mm'})","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'firstName', () ->\n  (name) ->\n\n    return '' if not name? or name == ''\n    names = name.split(' ')\n    return names[0]","'use strict'\n\nangular.module('oneImobiliaria')\n.directive 'meters', ['$parse', ($parse) ->\n  require: \"?ngModel\"\n  scope:\n    ngModel:'='\n  restrict: 'A'\n  link: ($scope, elem, attrs, ngModel) ->\n\n    console.log(ngModel.$modelValue)\n    formatter = (value) ->\n      value = 0 if not value?\n      value = value.toString().replace('m²', '')\n      value = value.toString().replace(/\\D/g, '')\n      return value + 'm²'\n\n    ngModel.$formatters.push (value) ->\n      console.log(value)\n      formatter(value)\n\n    ngModel.$parsers.push (value) ->\n      value.toString().replace('m²', '')\n\n    changeHandler = () ->\n      newValue = formatter(ngModel.$modelValue)\n\n      console.log(newValue)\n      $parse(attrs.ngModel).assign($scope, newValue);\n      ngModel.$viewValue = newValue;\n      ngModel.$render();\n\n    elem.bind('keyup', changeHandler)\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'orderByString', () ->\n  (array, property, reverse) ->\n    result = array.sort (object1, object2) ->\n      object1.localeCompare(object2) if angular.isUndefined(property)\n      object1[property].localeCompare(object2[property])\n\n    if reverse then result.reverse()\n    else result","'use strict';\n\nangular.module('oneImobiliaria')\n.filter 'phoneBr', () ->\n  (input) ->\n    return '' if not input?\n\n    if input.length == 10\n        return input.replace(/(\\d{2})(\\d{4})(\\d{4})/g,\"(\\$1) \\$2-\\$3\")\n    else\n        return input.replace(/(\\d{2})(\\d{5})(\\d{4})/g,\"(\\$1) \\$2-\\$3\")","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'range', () ->\n  (n) ->\n    res = []\n    res.push(i) for i in [1...(n + 1)] by 1\n    return res","'use strict'\n\nangular.module('oneImobiliaria')\n.filter 'yesOrNo', () ->\n  (type) ->\n\n    if type then 'Sim'\n    else 'Não'","'use strict'\n\nangular.module('oneImobiliaria')\n.directive 'file', () ->\n  require: \"ngModel\"\n  restrict: 'A'\n  link: ($scope, elem, attrs, ngModel) ->\n\n    changeHandler = (event) ->\n      files = event.target.files\n      file = files[0]\n\n      ngModel.$setViewValue(file)\n      $scope.$apply()\n\n    elem.bind('change', changeHandler)","'use strict'\n\nangular.module('oneImobiliaria')\n.controller 'AccountCtrl', ['$scope', '$rootScope', '$loading', '$logger', 'storage', 'UserService', ($scope, $rootScope, $loading, $logger, storage, UserService) ->\n\n  $scope.user = {}\n  $scope.edit = false\n\n  $loading.show()\n  UserService.getMyAccount()\n  .then (response) ->\n    $scope.user = response.data\n    $loading.hide()\n  .catch (response) ->\n    $logger.error('Erro ao buscar sua conta. Por favor, atualize a página.')\n    $loading.hide()\n\n  $scope.canEdit = () ->\n    $scope.edit = true\n\n  $scope.doUpdate = () ->\n    if !$rootScope.forms.user.$valid\n      $logger.error('Preencha todos os dados obrigatórios.')\n      return\n\n    console.log($scope.user)\n    $loading.show()\n    UserService.update($scope.user)\n    .then (response) ->\n      $logger.success('Sua conta foi atualizada com sucesso!')\n      storage.updateToken(response.data.token)\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao editar sua conta. Por favor, tente novamente.')\n      $loading.hide()\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.controller 'ClientsCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage', 'ClientService', ($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, ClientService) ->\n\n  $scope.client = {}\n  $scope.clients = []\n\n  $scope.edit = true\n\n  $loading.show()\n  if $stateParams.id\n    ClientService.get($stateParams.id)\n    .then (response) ->\n      $scope.client = response.data\n      $scope.edit = false\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar clientes. Por favor, atualize a página.')\n      $loading.hide()\n  else\n    ClientService.getAll()\n    .then (response) ->\n      $scope.clients = $filter('orderBy')(response.data, '-created')\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar clientes. Por favor, atualize a página.')\n      $loading.hide()\n\n  $scope.canEdit = () ->\n    $scope.edit = true\n\n  $scope.saveOrUpdate = () ->\n    if !$rootScope.forms.client.$valid\n      $logger.error('Preencha todos os dados obrigatórios.')\n      return\n\n    $loading.show()\n    ClientService.saveOrUpdate($scope.client)\n    .then (response) ->\n      $loading.hide()\n      $state.go('dashboard.clients')\n    .catch (response) ->\n      $logger.error('Erro ao criar/editar cliente. Por favor, tente novamente.')\n      $loading.hide()\n\n  $scope.doDelete = (index) ->\n\n    client = $scope.clients[index]\n    return false if client._id == storage.getCode()\n\n    $loading.show()\n    ClientService.delete(client._id)\n    .then (response) ->\n      $logger.success('Cliente excluído com sucesso!')\n      $scope.clients.splice(index, 1)\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao excluir cliente. Por favor, tente novamente.')\n      $loading.hide()\n\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.controller 'LoginCtrl', ['$scope', '$rootScope', '$state', '$logger', 'storage', 'UserService', ($scope, $rootScope, $state, $logger, storage, UserService) ->\n\n  $scope.user = {}\n\n  $scope.doLogin = () ->\n    if !$rootScope.forms.login.$valid\n      $logger.error('Preencha todos os dados obrigatórios.')\n      return\n\n    $scope.user.origin = 'admin'\n    UserService.doLogin($scope.user)\n    .then (response) ->\n      storage.setCodes(response.data)\n      $state.go('dashboard.home')\n    .catch (response) ->\n      $logger.error('Usuário e/ou senha inválido(s).')\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.controller 'PropertiesCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage', 'PropertyService', 'LocationService', 'ClientService', ($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, PropertyService, LocationService, ClientService) ->\n\n  $scope.property = {\n    \"code\":\"123\",\n    \"client\":\"585ecf5bd5af8351e3b894e3\",\n    \"type\":\"apartament\",\n    \"meters\":100,\n    \"vacancy\":\"1\",\n    \"floor\":\"2\",\n    \"address\":{\n      \"street\":\"Rua Teste\",\n      \"number\":\"123\",\n      \"state\":\"SP\",\n      \"city\":\"São Paulo\",\n      \"neighborhood\":\"Jardim Teste\",\n      \"cep\":\"03952020\"\n    },\n    \"hasSubway\":true,\n    \"subwayStation\":\"Penha\",\n    \"value\":1,\n    \"condominium\":2,\n    \"iptu\":3,\n    \"location\":4,\n    \"payments\": [\n      \"financing\",\n      \"money\",\n      \"others\"\n    ],\n    \"exchange\":0.1,\n    \"difference\":0.5,\n    \"carValue\":5,\n    \"settled\":true,\n    \"car\":true\n  }\n\n#  $scope.property = {payments: []}\n  $scope.properties = []\n  $scope.cities = []\n  $scope.states = []\n  $scope.clients = []\n  cities = []\n\n  $scope.edit = true\n\n  $loading.show()\n  if $stateParams.id\n    PropertyService.get($stateParams.id)\n    .then (response) ->\n      $scope.property = response.data\n      return LocationService.getAllStates()\n    .then (response) ->\n      $scope.states = response.data.sort()\n      return LocationService.getCitiesByState($scope.property.address.state)\n    .then (response) ->\n      currentCities = $filter('orderByString')(response.data, 'name')\n      $scope.cities = currentCities\n      cities[$scope.property.address.state] = currentCities\n      return ClientService.getAll()\n    .then (response) ->\n      $scope.clients = $filter('orderByString')(response.data, 'name')\n      $scope.edit = false\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar imóveis. Por favor, atualize a página.')\n      $loading.hide()\n  else\n    PropertyService.getAll()\n    .then (response) ->\n      $scope.properties = $filter('orderBy')(response.data, '-created')\n      return LocationService.getAllStates()\n    .then (response) ->\n      $scope.states = response.data.sort()\n      return ClientService.getAll()\n    .then (response) ->\n      $scope.clients = $filter('orderByString')(response.data, 'name')\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar imóveis. Por favor, atualize a página.')\n      $loading.hide()\n\n  $scope.showCities = (state) ->\n\n    if cities[state]?\n      $scope.cities = cities[state]\n      return false\n\n    $loading.show()\n    LocationService.getCitiesByState(state)\n    .then (response) ->\n      currentCities = $filter('orderByString')(response.data, 'name')\n      $scope.cities = currentCities\n      cities[state] = currentCities\n      $loading.hide()\n    .catch () ->\n      $loading.hide()\n\n\n  $scope.canEdit = () ->\n    $scope.edit = true\n\n  $scope.saveOrUpdate = () ->\n    if !$rootScope.forms.property.$valid\n      $logger.error('Preencha todos os dados obrigatórios.')\n      return\n\n    $loading.show()\n    PropertyService.saveOrUpdate($scope.property)\n    .then (response) ->\n      $loading.hide()\n      $state.go('dashboard.properties')\n    .catch (response) ->\n      $logger.error('Erro ao criar/editar imóvel. Por favor, tente novamente.')\n      $loading.hide()\n\n  $scope.doDelete = (index) ->\n\n    property = $scope.properties[index]\n    return false if property._id == storage.getCode()\n\n    $loading.show()\n    PropertyService.delete(property._id)\n    .then (response) ->\n      $logger.success('Imóvel excluído com sucesso!')\n      $scope.properties.splice(index, 1)\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao excluir imóvel. Por favor, tente novamente.')\n      $loading.hide()\n\n]","'use strict'\n\nangular.module('oneImobiliaria')\n.controller 'UsersCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$filter', '$loading', '$logger', 'storage','UserGroupService', 'UserService', ($scope, $rootScope, $state, $stateParams, $filter, $loading, $logger, storage, UserGroupService, UserService) ->\n\n  $scope.user = {}\n  $scope.users = []\n\n  $scope.groups = UserGroupService.getAll()\n  $scope.edit = true\n\n  $loading.show()\n  if $stateParams.id\n    UserService.get($stateParams.id)\n    .then (response) ->\n      $scope.user = response.data\n      $scope.edit = false\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar usuários. Por favor, atualize a página.')\n      $loading.hide()\n  else\n    UserService.getAll()\n    .then (response) ->\n      $scope.users = $filter('orderBy')(response.data, '-created')\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao buscar usuários. Por favor, atualize a página.')\n      $loading.hide()\n\n  $scope.canEdit = () ->\n    $scope.edit = true\n\n  $scope.saveOrUpdate = () ->\n    if !$rootScope.forms.user.$valid\n      $logger.error('Preencha todos os dados obrigatórios.')\n      return\n\n    $loading.show()\n    UserService.saveOrUpdate($scope.user)\n    .then (response) ->\n      $loading.hide()\n      $state.go('dashboard.users')\n    .catch (response) ->\n      $logger.error('Erro ao criar/editar usuário. Por favor, tente novamente.')\n      $loading.hide()\n\n  $scope.doDelete = (index) ->\n\n    user = $scope.users[index]\n    return false if user._id == storage.getCode()\n\n    $loading.show()\n    UserService.delete(user._id)\n    .then (response) ->\n      $logger.success('Usuário excluído com sucesso!')\n      $scope.users.splice(index, 1)\n      $loading.hide()\n    .catch (response) ->\n      $logger.error('Erro ao excluir usuário. Por favor, tente novamente.')\n      $loading.hide()\n\n]"]}